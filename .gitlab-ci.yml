variables:
  STEAM_CI_DEPENDENCIES: >-
    clang
    dbus
    json-glib
    meson
    ninja
    polkit
    valgrind
    python-dbusmock
    python-packaging

stages:
  - build

.build:
  stage: build
  tags:
    - docker
    - linux
  image: archlinux:base-devel
  script:
    - |
      set -eux

      pacman -Syu --needed --noconfirm --noprogressbar \
      ${STEAM_CI_DEPENDENCIES}

      # By setting this env var we can start new D-Bus services
      export DBUS_SESSION_BUS_ADDRESS=`dbus-daemon --fork --config-file=/usr/share/dbus-1/session.conf --print-address`
      # A new system bus is needed for the mock polkit
      export DBUS_SYSTEM_BUS_ADDRESS=`dbus-daemon --fork --config-file=ci/dbus_system.conf --print-address`

      export CC=${COMPILER}
      export CXX=${COMPILER}++

      meson \
        --werror \
        -Db_lundef=${LUNDEF} \
        -Db_sanitize=${SANITIZER} \
        -Dusing_valgrind=${VALGRIND:-false} \
        _build
      ninja -C _build
      ninja -C _build install

      # Do not run multiple tests in parallel because they all rely on the same
      # D-Bus path, so they'll conflict with each other
      if [ -z "${VALGRIND-}" ]; then
        meson test --verbose --num-processes 1 -C _build
      else
        export DEBUGINFOD_URLS=https://debuginfod.archlinux.org
        meson test --wrap='valgrind --trace-children=yes --error-exitcode=1' --verbose --num-processes 1 -C _build
      fi

  artifacts:
    paths:
      - _build/meson-logs/*.txt
    when: always

build:gcc:
  extends: .build
  variables:
    COMPILER: "gcc"
    LUNDEF: "true"
    SANITIZER: "none"

build:gcc_asan:
  extends: .build
  variables:
    COMPILER: "gcc"
    LUNDEF: "false"
    SANITIZER: "address,undefined"

build:clang:
  extends: .build
  variables:
    COMPILER: "clang"
    LUNDEF: "true"
    SANITIZER: "none"

build:clang_asan:
  extends: .build
  variables:
    COMPILER: "clang"
    LUNDEF: "false"
    SANITIZER: "address,undefined"

build:valgrind:
  extends: .build
  # FIXME this step is not yet entirely reliable
  allow_failure: true
  variables:
    COMPILER: "gcc"
    LUNDEF: "true"
    SANITIZER: "none"
    VALGRIND: "true"
